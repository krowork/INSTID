#!/usr/bin/env python3
"""
Verificaci√≥n Final - Soluci√≥n InstantID Completa
===============================================

Este script verifica que todas las correcciones est√©n aplicadas correctamente:
1. Import correcto de BasicTransformerBlock
2. Clases AttnProcessor e IPAttnProcessor implementadas
3. M√©todo set_ip_adapter corregido para usar attention processors
4. FlexibleResampler implementado
5. Sintaxis v√°lida del c√≥digo

Autor: AI Assistant
Fecha: 2025
"""

import os
import sys
import re

def verificar_imports():
    """Verifica que todos los imports est√©n correctos"""
    print("üîß Verificando imports...")
    
    try:
        with open('pipeline_stable_diffusion_xl_instantid.py', 'r') as f:
            content = f.read()
        
        # Verificar import de BasicTransformerBlock
        if 'from diffusers.models.attention import BasicTransformerBlock' in content:
            print("‚úÖ BasicTransformerBlock import correcto")
        else:
            print("‚ùå BasicTransformerBlock import incorrecto")
            return False
        
        # Verificar import de Attention con fallback
        if 'try:' in content and 'from diffusers.models.attention_processor import Attention' in content:
            print("‚úÖ Attention import con fallback correcto")
        else:
            print("‚ùå Attention import faltante")
            return False
            
        return True
        
    except FileNotFoundError:
        print("‚ùå Archivo pipeline no encontrado")
        return False

def verificar_clases_attention():
    """Verifica que las clases de attention est√©n implementadas"""
    print("üîß Verificando clases de attention...")
    
    try:
        with open('pipeline_stable_diffusion_xl_instantid.py', 'r') as f:
            content = f.read()
        
        # Verificar AttnProcessor
        if 'class AttnProcessor:' in content:
            print("‚úÖ AttnProcessor implementado")
        else:
            print("‚ùå AttnProcessor faltante")
            return False
        
        # Verificar IPAttnProcessor
        if 'class IPAttnProcessor(torch.nn.Module):' in content:
            print("‚úÖ IPAttnProcessor implementado")
        else:
            print("‚ùå IPAttnProcessor faltante")
            return False
        
        # Verificar m√©todos de IPAttnProcessor
        if 'self.to_k_ip = torch.nn.Linear' in content and 'self.to_v_ip = torch.nn.Linear' in content:
            print("‚úÖ IPAttnProcessor tiene to_k_ip y to_v_ip")
        else:
            print("‚ùå IPAttnProcessor incompleto")
            return False
            
        return True
        
    except FileNotFoundError:
        print("‚ùå Archivo pipeline no encontrado")
        return False

def verificar_set_ip_adapter():
    """Verifica que el m√©todo set_ip_adapter est√© corregido"""
    print("üîß Verificando m√©todo set_ip_adapter...")
    
    try:
        with open('pipeline_stable_diffusion_xl_instantid.py', 'r') as f:
            content = f.read()
        
        # Verificar que NO use BasicTransformerBlock en set_ip_adapter
        set_ip_adapter_match = re.search(r'def set_ip_adapter.*?(?=def|\Z)', content, re.DOTALL)
        if set_ip_adapter_match:
            method_content = set_ip_adapter_match.group(0)
            
            if 'BasicTransformerBlock(' in method_content:
                print("‚ùå set_ip_adapter todav√≠a usa BasicTransformerBlock")
                return False
            else:
                print("‚úÖ set_ip_adapter NO usa BasicTransformerBlock")
            
            # Verificar que use attention processors
            if 'attn_procs = {}' in method_content and 'IPAttnProcessor(' in method_content:
                print("‚úÖ set_ip_adapter usa attention processors")
            else:
                print("‚ùå set_ip_adapter no usa attention processors correctamente")
                return False
                
            # Verificar manejo de errores
            if 'except Exception as e:' in method_content and 'logger.warning' in method_content:
                print("‚úÖ set_ip_adapter tiene manejo de errores robusto")
            else:
                print("‚ùå set_ip_adapter sin manejo de errores adecuado")
                return False
        else:
            print("‚ùå M√©todo set_ip_adapter no encontrado")
            return False
            
        return True
        
    except FileNotFoundError:
        print("‚ùå Archivo pipeline no encontrado")
        return False

def verificar_flexible_resampler():
    """Verifica que FlexibleResampler est√© implementado"""
    print("üîß Verificando FlexibleResampler...")
    
    try:
        if os.path.exists('ip_adapter/resampler_flexible.py'):
            with open('ip_adapter/resampler_flexible.py', 'r') as f:
                content = f.read()
            
            if 'class FlexibleResampler' in content:
                print("‚úÖ FlexibleResampler implementado")
                
                if 'load_state_dict_flexible' in content:
                    print("‚úÖ FlexibleResampler tiene carga flexible")
                else:
                    print("‚ö†Ô∏è FlexibleResampler sin carga flexible")
                    
                return True
            else:
                print("‚ùå FlexibleResampler no encontrado en el archivo")
                return False
        else:
            print("‚ö†Ô∏è Archivo resampler_flexible.py no encontrado")
            return True  # No es cr√≠tico
            
    except Exception as e:
        print(f"‚ö†Ô∏è Error verificando FlexibleResampler: {e}")
        return True  # No es cr√≠tico

def verificar_sintaxis():
    """Verifica que la sintaxis del c√≥digo sea v√°lida"""
    print("üîß Verificando sintaxis...")
    
    try:
        with open('pipeline_stable_diffusion_xl_instantid.py', 'r') as f:
            content = f.read()
        
        # Intentar compilar el c√≥digo
        compile(content, 'pipeline_stable_diffusion_xl_instantid.py', 'exec')
        print("‚úÖ Sintaxis v√°lida")
        return True
        
    except SyntaxError as e:
        print(f"‚ùå Error de sintaxis: {e}")
        return False
    except FileNotFoundError:
        print("‚ùå Archivo pipeline no encontrado")
        return False

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üéØ Verificaci√≥n Final - Soluci√≥n InstantID Completa")
    print("=" * 60)
    
    verificaciones = [
        ("Imports", verificar_imports),
        ("Clases Attention", verificar_clases_attention),
        ("M√©todo set_ip_adapter", verificar_set_ip_adapter),
        ("FlexibleResampler", verificar_flexible_resampler),
        ("Sintaxis", verificar_sintaxis),
    ]
    
    resultados = []
    
    for nombre, funcion in verificaciones:
        print(f"\nüìã {nombre}:")
        resultado = funcion()
        resultados.append((nombre, resultado))
    
    print("\n" + "=" * 60)
    print("üìä RESUMEN FINAL:")
    
    exitosas = 0
    for nombre, resultado in resultados:
        estado = "‚úÖ PASS" if resultado else "‚ùå FAIL"
        print(f"  {estado} {nombre}")
        if resultado:
            exitosas += 1
    
    print(f"\nüéØ Resultado: {exitosas}/{len(resultados)} verificaciones exitosas")
    
    if exitosas == len(resultados):
        print("üéâ ¬°TODAS LAS CORRECCIONES APLICADAS CORRECTAMENTE!")
        print("üìù El pipeline InstantID est√° listo para usar en Colab")
    else:
        print("‚ö†Ô∏è Algunas verificaciones fallaron")
        print("üìù Revisar los errores antes de usar en Colab")
    
    return exitosas == len(resultados)

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 