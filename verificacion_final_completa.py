#!/usr/bin/env python3
"""
Verificaci√≥n Final Completa - InstantID
=======================================

Este script verifica todas las correcciones aplicadas al pipeline de InstantID:
1. Import correcto de BasicTransformerBlock
2. Correcci√≥n de self.up_blocks -> self.unet.up_blocks
3. Par√°metros v√°lidos en BasicTransformerBlock constructor
4. FlexibleResampler implementado
5. Sintaxis v√°lida del c√≥digo

Autor: AI Assistant
Fecha: 2025
"""

import os
import sys
import re

def verificar_import_basictransformerblock():
    """Verifica que el import de BasicTransformerBlock est√© correcto"""
    print("üîß Verificando import de BasicTransformerBlock...")
    
    try:
        with open('pipeline_stable_diffusion_xl_instantid.py', 'r') as f:
            content = f.read()
        
        # Verificar import correcto
        import_correcto = 'from diffusers.models.attention import BasicTransformerBlock'
        import_incorrecto = 'from diffusers.models.attention_processor import BasicTransformerBlock'
        
        if import_correcto in content:
            print("‚úÖ Import correcto encontrado: diffusers.models.attention")
            return True
        elif import_incorrecto in content:
            print("‚ùå Import incorrecto encontrado: diffusers.models.attention_processor")
            return False
        else:
            print("‚ùå No se encontr√≥ ning√∫n import de BasicTransformerBlock")
            return False
            
    except FileNotFoundError:
        print("‚ùå Archivo pipeline_stable_diffusion_xl_instantid.py no encontrado")
        return False

def verificar_correccion_up_blocks():
    """Verifica que la correcci√≥n de up_blocks est√© aplicada"""
    print("üîß Verificando correcci√≥n de up_blocks...")
    
    try:
        with open('pipeline_stable_diffusion_xl_instantid.py', 'r') as f:
            content = f.read()
        
        # Buscar la l√≠nea problem√°tica
        linea_incorrecta = 'dim=self.up_blocks[i].resnets[1].out_channels'
        linea_correcta = 'dim=self.unet.up_blocks[i].resnets[1].out_channels'
        
        if linea_correcta in content and linea_incorrecta not in content:
            print("‚úÖ Correcci√≥n de up_blocks aplicada correctamente")
            return True
        elif linea_incorrecta in content:
            print("‚ùå L√≠nea incorrecta encontrada: self.up_blocks")
            return False
        else:
            print("‚ùå No se encontr√≥ la l√≠nea de configuraci√≥n")
            return False
            
    except FileNotFoundError:
        print("‚ùå Archivo pipeline_stable_diffusion_xl_instantid.py no encontrado")
        return False

def verificar_parametros_basictransformerblock():
    """Verifica que los par√°metros de BasicTransformerBlock sean v√°lidos"""
    print("üîß Verificando par√°metros de BasicTransformerBlock...")
    
    try:
        with open('pipeline_stable_diffusion_xl_instantid.py', 'r') as f:
            content = f.read()
        
        # Buscar par√°metros inv√°lidos
        parametros_invalidos = [
            'post_attention_norm=True',
            'ff_inner_dim=None',
            'ff_bias=True'
        ]
        
        parametros_encontrados = []
        for param in parametros_invalidos:
            if param in content:
                parametros_encontrados.append(param)
        
        if not parametros_encontrados:
            print("‚úÖ Par√°metros de BasicTransformerBlock corregidos")
            return True
        else:
            print(f"‚ùå Par√°metros inv√°lidos encontrados: {parametros_encontrados}")
            return False
            
    except FileNotFoundError:
        print("‚ùå Archivo pipeline_stable_diffusion_xl_instantid.py no encontrado")
        return False

def verificar_flexible_resampler():
    """Verifica que el FlexibleResampler est√© implementado"""
    print("üîß Verificando FlexibleResampler...")
    
    try:
        if os.path.exists('ip_adapter/resampler_flexible.py'):
            print("‚úÖ FlexibleResampler implementado")
            return True
        else:
            print("‚ùå FlexibleResampler no encontrado")
            return False
            
    except Exception as e:
        print(f"‚ùå Error verificando FlexibleResampler: {e}")
        return False

def verificar_sintaxis():
    """Verifica que la sintaxis del c√≥digo sea v√°lida"""
    print("üîß Verificando sintaxis del c√≥digo...")
    
    try:
        with open('pipeline_stable_diffusion_xl_instantid.py', 'r') as f:
            content = f.read()
        
        # Intentar compilar el c√≥digo
        compile(content, 'pipeline_stable_diffusion_xl_instantid.py', 'exec')
        print("‚úÖ Sintaxis del c√≥digo v√°lida")
        return True
        
    except SyntaxError as e:
        print(f"‚ùå Error de sintaxis: {e}")
        return False
    except FileNotFoundError:
        print("‚ùå Archivo pipeline_stable_diffusion_xl_instantid.py no encontrado")
        return False

def main():
    """Funci√≥n principal que ejecuta todas las verificaciones"""
    print("üéØ Verificaci√≥n Final Completa - InstantID")
    print("=" * 50)
    
    verificaciones = [
        ("Import BasicTransformerBlock", verificar_import_basictransformerblock),
        ("Correcci√≥n up_blocks", verificar_correccion_up_blocks),
        ("Par√°metros BasicTransformerBlock", verificar_parametros_basictransformerblock),
        ("FlexibleResampler", verificar_flexible_resampler),
        ("Sintaxis del c√≥digo", verificar_sintaxis),
    ]
    
    resultados = []
    
    for nombre, funcion in verificaciones:
        print(f"\nüìã {nombre}:")
        resultado = funcion()
        resultados.append((nombre, resultado))
    
    print("\n" + "=" * 50)
    print("üìä RESUMEN DE VERIFICACIONES:")
    print("=" * 50)
    
    exitosas = 0
    for nombre, resultado in resultados:
        estado = "‚úÖ PAS√ì" if resultado else "‚ùå FALL√ì"
        print(f"{estado} - {nombre}")
        if resultado:
            exitosas += 1
    
    print(f"\nüéØ RESULTADO FINAL: {exitosas}/{len(verificaciones)} verificaciones pasadas")
    
    if exitosas == len(verificaciones):
        print("üéâ ¬°TODAS LAS CORRECCIONES APLICADAS CORRECTAMENTE!")
        print("üí° El pipeline de InstantID deber√≠a funcionar ahora en Colab")
    else:
        print("‚ö†Ô∏è  Algunas correcciones necesitan atenci√≥n")
        print("üí° Revisa los errores arriba para m√°s detalles")
    
    return exitosas == len(verificaciones)

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 